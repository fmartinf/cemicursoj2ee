Index: WebContent/solicitarFichero.jsp
===================================================================
--- WebContent/solicitarFichero.jsp	(revision 0)
+++ WebContent/solicitarFichero.jsp	(revision 0)
@@ -0,0 +1,18 @@
+<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
+    pageEncoding="ISO-8859-1"%>
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<%@taglib uri="/struts-tags"  prefix="s" %>
+<html>
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+<title>Solicitar fichero del servidor</title>
+<s:head />
+</head>
+<body>
+<s:form action="fileDownload" method="post" >
+	<s:textfield name="filename" label="Nombre del fichero" />
+	<s:textfield name="fileContentType" label="Tipo MIME" />
+	<s:submit />
+</s:form>
+</body>
+</html>
\ No newline at end of file
Index: src/struts.xml
===================================================================
--- src/struts.xml	(revision 159)
+++ src/struts.xml	(working copy)
@@ -42,5 +42,12 @@
 			<result name="input">/index.jsp</result>
 			<result name="success">/success.jsp</result>
 		</action>
+		
+		<action name="fileDownload" class="vaannila.FileDownloadAction">
+			<result name="input">/solicitarFichero.jsp</result>
+			<result name="success" type="stream" />
+			<param name="inputName">inputStream</param>
+			<param name="bufferSize">1024</param>
+		</action>
 	</package>
 </struts>
\ No newline at end of file
Index: src/vaannila/FileDownloadAction.java
===================================================================
--- src/vaannila/FileDownloadAction.java	(revision 0)
+++ src/vaannila/FileDownloadAction.java	(revision 0)
@@ -0,0 +1,119 @@
+package vaannila;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.io.FileUtils;
+import org.apache.struts2.ServletActionContext;
+
+import com.opensymphony.xwork2.ActionSupport;
+
+public class FileDownloadAction extends ActionSupport {
+
+	private String filename;
+	private String fileContentType;
+		
+	private InputStream inputStream = null;
+
+	
+	
+	public String getFilename() {
+		return filename;
+	}
+
+	public void setFilename(String filename) {
+		this.filename = filename;
+	}
+	
+	public String getFileContentType() {
+		return fileContentType;
+	}
+
+	public void setFileContentType(String fileContentType) {
+		this.fileContentType = fileContentType;
+	}
+	
+	public InputStream getInputStream() {
+		return inputStream;
+	}
+
+	public void setInputStream(InputStream inputStream) {
+		this.inputStream = inputStream;
+	}
+	
+	@Override
+    public void validate() {
+        if (getFilename().length() == 0) {
+            addFieldError("filename", "Debe introducir el nombre del fichero");
+        } else if (Utils.getExistingFile(filename) == null) {
+        	addFieldError("filename", "No se puede encontrar el nombre del fichero especificado");
+        }
+        
+        if (getFileContentType().length() == 0) {
+            addFieldError("fileContentType", "Es necesario indicar el content-type del fichero");
+        }
+    }
+
+	@Override
+	public String execute() {
+		String page = SUCCESS;
+		
+		HttpServletRequest request = (HttpServletRequest) ServletActionContext
+				.getRequest();
+		HttpServletResponse response = (HttpServletResponse) ServletActionContext
+				.getResponse();
+		
+		File file = Utils.getExistingFile(filename);
+		
+		if (file == null) {
+			addActionError("El fichero: "+filename+" no ha sido encontrado");
+			page = ERROR;
+		} else {
+			response.setContentType(fileContentType);
+			response.setContentLength(Utils.getFileSize(file));
+			response.setHeader("Title", filename);
+			response.setHeader("Content-Disposition",
+					"inline; fileName=\"" + file.getName() + "\"");
+			response.setHeader("Cache-Control",
+					"must-revalidate, post-check=0, pre-check=0");
+			response.setHeader("Pragma", "public");
+			response.setDateHeader("Expires", 0);
+
+			FileInputStream fis;
+			try {
+				fis = new FileInputStream(file);
+				this.setInputStream(fis);
+			} catch (FileNotFoundException e1) {
+				addActionError("El fichero: "+filename+" no ha sido encontrado");
+				page = ERROR;
+			} catch (Exception e) {
+				addActionError("Error obteniendo el fichero: "+filename);
+				page = ERROR;
+			}
+
+		}
+		
+		return page;
+	}
+	
+	private void writeImage(final OutputStream os, final File file) throws IOException {      
+        writeImage(os, FileUtils.readFileToByteArray(file));
+    }
+	
+	private void writeImage(final OutputStream os, final byte[] fileBytes) {
+        try {
+            os.write(fileBytes);
+        } catch (final IOException e) {
+            addActionError("Error escribiendo el fichero: "+filename+ " en la response");
+        }
+    }
+
+
+}
Index: src/vaannila/FileUploadAction.java
===================================================================
--- src/vaannila/FileUploadAction.java	(revision 159)
+++ src/vaannila/FileUploadAction.java	(working copy)
@@ -2,8 +2,6 @@
 
 import java.io.File;
 
-import org.apache.commons.io.FileUtils;
-
 import com.opensymphony.xwork2.ActionSupport;
 
 public class FileUploadAction extends ActionSupport{
@@ -12,27 +10,22 @@
 	
 	private String userImageContentType;
 	
-	private String userImageFileName;
-	
-	private static final String UPLOADS_DIRECTORY = "c:/uploads/";
+	private String userImageFileName;	
 		
+	@Override
 	public String execute()
-	{
+	{			
+		String page = SUCCESS;
+		
 		try {
-			StringBuilder sb = new StringBuilder();
-			sb.append(UPLOADS_DIRECTORY);
-			sb.append(userImageFileName);
-			
-			File theFile = new File(sb.toString());
-			FileUtils.copyFile(userImage, theFile);
-
+			Utils.saveFile(userImageFileName, userImage);
 		} catch (Exception e) {
 			addActionError(e.getMessage());
-			return INPUT;
+			page = INPUT;
 		}
 		
-		return SUCCESS;
-	}
+		return page;
+	}	
 
 	public File getUserImage() {
 		return userImage;
Index: src/vaannila/Utils.java
===================================================================
--- src/vaannila/Utils.java	(revision 0)
+++ src/vaannila/Utils.java	(revision 0)
@@ -0,0 +1,56 @@
+package vaannila;
+
+import java.io.File;
+
+import org.apache.commons.io.FileUtils;
+
+public class Utils {
+
+	public static final String UPLOADS_DIRECTORY = "c:/uploads/";
+
+	public static void saveFile(String filename, File file) throws Exception {
+		StringBuilder sb = new StringBuilder();
+		sb.append(Utils.UPLOADS_DIRECTORY);
+		sb.append(filename);
+
+		File theFile = new File(sb.toString());
+		FileUtils.copyFile(file, theFile);
+	}
+
+	public static File getExistingFile(String filename) {
+		File result = null;
+
+		if (filename != null) {
+			StringBuilder sb = new StringBuilder();
+			sb.append(Utils.UPLOADS_DIRECTORY);
+			sb.append(filename);
+
+			try {
+				result = new File(sb.toString());
+
+				if (!result.exists()) {
+					result = null;
+				}
+			} catch (NullPointerException e) {
+				result = null;
+			} catch (Exception e) {
+				result = null;
+			}
+		}
+
+		return result;
+	}
+
+	public static int getFileSize(File file) {
+		Integer result = null;
+
+		if (file != null) {
+			Long fileSize = file.length();
+
+			result = fileSize.intValue();
+		}
+
+		return result;
+	}
+
+}
